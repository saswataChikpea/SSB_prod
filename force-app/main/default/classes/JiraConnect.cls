public with sharing class JiraConnect {
    public String response1{get;set;}
    public String token1{get;set;}
    public String code1{get;set;}
    public String cloudId{get;set;}
    

    @AuraEnabled(cacheable=true)
    public static List<Object> getJiraClouldIdLWC(){
        System.debug('getJiraClouldIdLWC called!!!');
        try {
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint('callout:jira_cloud_id/oauth/token/accessible-resources');
            request.setMethod('GET');
            //request.setHeader('Authorization', 'Bearer '+this.token1);
            request.setHeader('Content-Type', 'application/json');
            request.setHeader('Accept' , 'application/json');

            HttpResponse response = http.send(request);
            // If the request is successful, parse the JSON response.
            System.debug('#******************************getJiraClouldIdLWC response='+response);
            if(response.getStatusCode() == 200) {
                // Deserialize the JSON string into collections of primitive data types.
                System.debug('results body:'+response.getBody());
                List<Object> results = (List<Object>) JSON.deserializeUntyped(response.getBody());
                System.debug('results:'+results);
                return results;
                // Map<String, Object> result1 = (Map<String, Object>) results[0];
                // String cloudId = (String)result1.get('id');
                // System.debug('cloudId:'+results);
            }else{
                throw new AuraHandledException(response.toString());
            }
        } catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }
    
    @AuraEnabled(cacheable=true)
    public static Map<String, Object> getJiraTicketLWC(String cloudId, String jsonBody){
        System.debug('getJiraTicketLWC cloudId==> '+cloudId+' jsonBody=>'+jsonBody);
        try {
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint('callout:jira_cloud_id/ex/jira/'+cloudId+'/rest/api/3/search/');
            request.setMethod('POST');
            //request.setHeader('Authorization', 'Bearer '+this.token1);
            request.setHeader('Content-Type', 'application/json');
            request.setHeader('Accept' , 'application/json');
            request.setBody(jsonBody);

            HttpResponse response = http.send(request);
            // If the request is successful, parse the JSON response.
            System.debug('#******************************response='+response);
            System.debug('results:'+response.getBody());
            Map<String, Object> results = new Map<String, Object>();
            try{
                Map<String, Object> jiraRes = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
                results.put('jiraRes', jiraRes);
            }catch(Exception e){

            }
            try{
                List<Object> jiraRes = (List<Object>) JSON.deserializeUntyped(response.getBody());
                results.put('jiraRes', jiraRes);
            }catch(Exception e){

            }
            results.put('StatusCode', response.getStatusCode());
            return results;
        } catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }
    @AuraEnabled(cacheable=true)
    public static Map<String, Object> createJiraTicketLWC(String cloudId, String jsonBody){
        try {
            System.debug('createJiraTicketLWC => '+cloudId+' body=>'+jsonBody);
            Long ms = System.currentTimeMillis();
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint('callout:jira_cloud_id/ex/jira/'+cloudId+'/rest/api/3/issue/bulk');
            request.setMethod('POST');
            //request.setHeader('Authorization', 'Bearer '+this.token1);
            request.setHeader('Content-Type', 'application/json');
            request.setHeader('Accept' , 'application/json');
            //request.setBody('{"fields": {"project": {"key": "SP"},"summary": "Creating From Collection '+ms+'","description": {"type": "doc","version": 1,"content": [{"type": "paragraph","content": [{"type": "text","text": "This is an autogenerated issue from a demo."}]}]},"issuetype": {"name": "Task"}}}');
            request.setBody(jsonBody);

            HttpResponse response = http.send(request);
            // If the request is successful, parse the JSON response.
            System.debug('#******************************response='+response);
            System.debug('results:'+response.getBody());
            Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
            results.put('StatusCode', response.getStatusCode());
            return results;
        } catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }
    @AuraEnabled(cacheable=true)
    public static Map<String, Object> createJiraProjectLWC(String cloudId, String jsonBody){
        System.debug('createJiraProjectLWC ==>'+cloudId+' jsonBody=>'+jsonBody);
        try {
            Long ms = System.currentTimeMillis();
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint('callout:jira_cloud_id/ex/jira/'+cloudId+'/rest/api/3/project/');
            request.setMethod('POST');
            //request.setHeader('Authorization', 'Bearer '+this.token1);
            request.setHeader('Content-Type', 'application/json');
            request.setHeader('Accept' , 'application/json');
            //request.setBody('{"fields": {"project": {"key": "SP"},"summary": "Creating From Collection '+ms+'","description": {"type": "doc","version": 1,"content": [{"type": "paragraph","content": [{"type": "text","text": "This is an autogenerated issue from a demo."}]}]},"issuetype": {"name": "Task"}}}');
            request.setBody(jsonBody);

            HttpResponse response = http.send(request);
            // If the request is successful, parse the JSON response.
            System.debug('#******************************createJiraProjectLWC response='+response);
            System.debug('results:'+response.getBody());
            // if(response.getStatusCode() == 201) {
            //     // Deserialize the JSON string into collections of primitive data types.
            //     System.debug('results:'+response.getBody());
            //     Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
            //     System.debug('results:'+results);
            //     //this.response1 = results.toString();
            //     return results;
            // }
            Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
            results.put('StatusCode', response.getStatusCode());
            return results;
        } catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }

    @AuraEnabled(cacheable=true)
    public static Map<String, Object> jiraGenericCallLWC(String url, String jsonBody, String method, String callId){
        System.debug('#****jiraGenericCallLWC******url =>'+url+' jsonBody=>'+jsonBody+' method=>'+method+' callId=>'+callId);
        try{
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint(url);
            request.setMethod(method);
            //request.setHeader('Authorization', 'Bearer '+this.token1);
            request.setHeader('Content-Type', 'application/json');
            request.setHeader('Accept' , 'application/json');
            if(method == 'POST' || method == 'PUT')
                request.setBody(jsonBody);

            HttpResponse response = http.send(request);
            // If the request is successful, parse the JSON response.
            System.debug('#******************************jiraGenericCallLWC response='+response);
            System.debug('results:'+response.getBody());
            Map<String, Object> results = new Map<String, Object>();
            try{
                Map<String, Object> jiraRes = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
                results.put('jiraRes', jiraRes);
            }catch(Exception e){

            }
            try{
                List<Object> jiraRes = (List<Object>) JSON.deserializeUntyped(response.getBody());
                results.put('jiraRes', jiraRes);
            }catch(Exception e){

            }
            results.put('StatusCode', response.getStatusCode());
            results.put('callId', callId);
            return results;
        } catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }
}