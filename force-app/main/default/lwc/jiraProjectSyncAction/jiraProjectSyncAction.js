import { LightningElement, api, wire, track } from 'lwc'
import { CurrentPageReference, NavigationMixin } from 'lightning/navigation';
import { ShowToastEvent } from 'lightning/platformShowToastEvent'
import { CloseActionScreenEvent } from 'lightning/actions'
import { getRelatedListRecords } from 'lightning/uiRelatedListApi'
import { getRecord, updateRecord } from 'lightning/uiRecordApi'
import getJiraClouldIdLWC from '@salesforce/apex/JiraConnect.getJiraClouldIdLWC'
import createJiraTicketLWC from '@salesforce/apex/JiraConnect.createJiraTicketLWC'
import createJiraProjectLWC from '@salesforce/apex/JiraConnect.createJiraProjectLWC'
import getJiraTicketLWC from '@salesforce/apex/JiraConnect.getJiraTicketLWC'
import jiraGenericCallLWC from '@salesforce/apex/JiraConnect.jiraGenericCallLWC'
import LightningConfirm from 'lightning/confirm';
import LightningAlert from 'lightning/alert';

export default class JiraProjectSyncAction extends LightningElement {

    @api recordId
    @track error
    @track phase_records
    @track project_record
    @track cloudId
    @track key
    @track isLoading;

    searchJQLJSON = {
        jql: "project = FPM29885",
        startAt: 0,
        maxResults: 15,
        fields: [
            "summary",
            "status",
            "assignee",
            "duedate",
            "customfield_10015"
        ]
    }

    @api
    invoke() {
        console.log('inside invoke');
        this.confirmHandler();
    }


    async confirmHandler() {
        const result = await LightningConfirm.open({
            message: '',
            theme: 'warning',
            //variant: 'headerless',
            label: 'Want to Connect to Jira?',
            // setting theme would have no effect
        });
        console.log('Before result=>', result);
        if (result) {
            // this.quoteStatus = getFieldValue(this.oppRecord.data, QUOTE_STATUS);
            this.isLoading = true;
            this.getJiraCloudIdJS();
            this.getJiraTicketLWCJS();
            this.jiraGenericCallLWCJS();
            this.isLoading = !this.isLoading;
            console.log('After result=>', result, 'quoteStatus : ', this.quoteStatus);
            // if (this.quoteStatus != 'Contract Signed') {
            //     this.confirmHandler1();
            // } else {
            //     //call the update method 
            //     this.isLoading = true;
            //     this.convertOppToQuote();
            // }

        }
    }
    async confirmHandler1() {
        const result = await LightningAlert.open({
            message: '',
            theme: 'error',
            //variant: 'headerless',
            label: 'Quote status does not equal to Contract Signed',
            // setting theme would have no effect
        });
    }
    url
    jsonBody
    method
    callId
    searchJQL

    accountId = "5af9464ad7cce75687b9ef14"
    totalTask = {
        gotRelatedListRecords: false,
        gotRecord: false,
        gotJiraClouldIdLWC: false,
        jiraProjectCreated: false,
        jiraIssueSynced: false
    }
    project_body = {
        projectTypeKey: "business",
        leadAccountId: this.accountId,
        issueTypeScreenScheme: "1"
    }
    dep_issue_body = {
        issueUpdates: [

        ]
    }
    issue_body = {
        issueUpdates: [

        ]
    }
    issue = {
        update: {}, 
        fields: { 
            project: 
            { 
                key: "" 
            }, 
            summary: "", 
            description: 
            { 
                type: "doc", 
                version: 1, 
                content: 
                [
                    { 
                        type: "paragraph", 
                        content: 
                        [
                            {
                                type: "text", 
                                text: "This is an autogenerated issue from a demo." 
                            }
                        ] 
                    }
                ] 
            }, 
            issuetype: 
            { 
                name: "Task" 
            } 
        }
    }

    phase_dependency = {}
    //issue_map = {}
    phase_dep_array = []

    @wire(getRelatedListRecords, {
        parentRecordId: '$recordId',
        relatedListId: 'ChikPeaSSB__Project_Phases__r',
        fields: ['ChikPeaSSB__Project_Phase__c.Name', 'ChikPeaSSB__Project_Phase__c.ChikPeaSSB__Dependencies__c',
            'ChikPeaSSB__Project_Phase__c.ChikPeaSSB__Descriptions__c', 'ChikPeaSSB__Project_Phase__c.ChikPeaSSB__Dependencies__c',
            'ChikPeaSSB__Project_Phase__c.ChikPeaSSB__Est_Start_date__c', 'ChikPeaSSB__Project_Phase__c.ChikPeaSSB__Est_End_Date__c'],
        sortBy: ['ChikPeaSSB__Project_Phase__c.CreatedDate']
    }) listInfo({ error, data }) {
        if (data) {
            console.log('getRelatedListRecords data =>',JSON.stringify(data));
            this.phase_records = data.records;
            this.error = undefined;
            console.log('getRelatedListRecords', JSON.stringify(this.phase_records))
            this.totalTask.gotRelatedListRecords = true
            this.startSync()
        } else if (error) {
            this.error = error;
            this.phase_records = undefined;
        }
    }
    // getRelatedListRecordsJS() {
    //     getRelatedListRecords({
    //         parentRecordId: '$recordId',
    //         relatedListId: 'ChikPeaSSB__Project_Phases__r',
    //         fields: ['ChikPeaSSB__Project_Phase__c.Name', 'ChikPeaSSB__Project_Phase__c.ChikPeaSSB__Dependencies__c',
    //             'ChikPeaSSB__Project_Phase__c.ChikPeaSSB__Descriptions__c', 'ChikPeaSSB__Project_Phase__c.ChikPeaSSB__Dependencies__c',
    //             'ChikPeaSSB__Project_Phase__c.ChikPeaSSB__Est_Start_date__c', 'ChikPeaSSB__Project_Phase__c.ChikPeaSSB__Est_End_Date__c'],
    //         sortBy: ['ChikPeaSSB__Project_Phase__c.CreatedDate']
    //     }).then(data => {
    //         console.log('Success=>', JSON.stringify(data));
    //         this.phase_records = data.records;
    //         this.error = undefined;
    //         console.log('getRelatedListRecords', JSON.stringify(this.phase_records))
    //         this.totalTask.gotRelatedListRecords = true
    //         this.startSync()
    //     }).catch(error => {
    //         console.error('error==>', error);
    //         this.error = error;
    //         this.phase_records = undefined;

    //     });
    // }
    resolveDependency() {
        this.phase_dependency.null = []
        let index = 1
        this.phase_records.forEach(e => {
            console.log('resolveDependency e =>',e,' ...e',{...e});
            const phase = { ...e }
            console.log('phase =>'+JSON.stringify(phase));
            phase.key = this.key + '-' + index
            if (phase.fields.ChikPeaSSB__Dependencies__c.value) {
                let depens = []
                if (this.phase_dependency[phase.fields.ChikPeaSSB__Dependencies__c.value]) {
                    depens = this.phase_dependency[phase.fields.ChikPeaSSB__Dependencies__c.value]
                } else {
                    this.phase_dependency[phase.fields.ChikPeaSSB__Dependencies__c.value] = depens
                }
                depens.push(phase)
            } else {
                this.phase_dependency.null.push(phase)
            }
            index++
        })
        console.log(JSON.stringify(this.phase_dependency, null, '\t'));
        if (this.phase_dependency.null) {
            this.phase_dependency.null.forEach(element => {
                this.phase_dep_array.push(element)
                this.resolveDependencyRec(element)
            });
        }

        console.log('phase_dep_array', JSON.stringify(this.phase_dep_array, null, '\t'));
    }
    resolveDependencyRec(ele) {
        if (this.phase_dependency[ele.fields.Name.value])
            this.phase_dependency[ele.fields.Name.value].forEach(element => {
                this.phase_dep_array.push(element)
                this.resolveDependencyRec(element)
            })
    }


    @wire(getRecord, { recordId: '$recordId', fields: ['ChikPeaSSB__Chikpea_Project__c.Name', 'ChikPeaSSB__Chikpea_Project__c.ChikPeaSSB__Jira_Id__c', 'ChikPeaSSB__Chikpea_Project__c.ChikPeaSSB__Jira_Key__c'] })
    recordDetail({ error, data }) {
        if (data) {
            this.error = undefined;
            console.log('getRecord', JSON.stringify(data))
            this.project_record = data
            this.totalTask.gotRecord = true
            if (this.project_record.fields.ChikPeaSSB__Jira_Id__c.value != null && 
                this.project_record.fields.ChikPeaSSB__Jira_Id__c.value != '')
                this.totalTask.jiraProjectCreated = true
            this.key = this.project_record.fields.ChikPeaSSB__Jira_Key__c.value
            this.searchJQLJSON.jql = "project = " + this.key
            this.searchJQL = JSON.stringify(this.searchJQLJSON)
            console.log('searchJQL =>', this.searchJQL);
            this.startSync()

        } else if (error) {
            this.error = error;
            console.error('getRecord', JSON.stringify(error));
        }
    }

    // @wire(getJiraClouldIdLWC, {})
    // handleJiraCloudIdRes({ error, data }) {
    //     if (data) {
    //         console.log('get cloud id', JSON.stringify(data))
    //         this.cloudId = data[0].id
    //         console.log('cloud id', this.cloudId)
    //         this.totalTask.gotJiraClouldIdLWC = true
    //         this.startSync()
    //         //this.exp1()
    //     }
    // }
    getJiraCloudIdJS() {
        console.log('getJiraCloudIdJS called !!!');
        getJiraClouldIdLWC({}).then(data => {
            console.log('getJiraCloudIdJS Success=>', JSON.stringify(data));
            this.cloudId = data[0].id
            console.log('cloud id', this.cloudId);
            this.totalTask.gotJiraClouldIdLWC = true
            this.startSync()
        }).catch(error => {
            console.error('error==>1', error);
            console.error('error==>1', JSON.stringify(error));

        });
    }
    // exp1() {
    //     //this.accountId = 

    //     //make generic call
    //     // this.url = 'callout:jira_cloud_id/ex/jira/'+this.cloudId+'/rest/api/3/issuetype/'

    //     // this.url = 'callout:jira_cloud_id/ex/jira/' + this.cloudId + '/rest/api/3/issue/FPM33SK-1'
    //     // this.jsonBody = ''
    //     // this.method = 'GET'
    //     // this.callId = 'issuetype'

    //     this.url = 'callout:jira_cloud_id/ex/jira/' + this.cloudId + '/rest/api/3/issue/' + this.key + '-1'
    //     const jsonBody = {
    //         update: {
    //             issuelinks: [
    //                 {
    //                     add: {
    //                         type: {
    //                             name: "Blocks",
    //                             inward: "is blocked by",
    //                             outward: "blocks"
    //                         },
    //                         outwardIssue: {
    //                             key: this.key + "-2"
    //                         }
    //                     }
    //                 }
    //             ]
    //         }
    //     }
    //     this.jsonBody = JSON.stringify(jsonBody)
    //     this.method = 'PUT'
    //     this.callId = 'issuelinks'
    // }

    startSync() {
        console.log('startSync called..');
        if (this.totalTask.gotJiraClouldIdLWC && 
            this.totalTask.gotRecord && 
            this.totalTask.gotRelatedListRecords) {
            if (!this.totalTask.jiraProjectCreated) {
                this.createJiraProject()
            }
            // else if (!this.totalTask.jiraIssueSynced)
            //     this.createJiraIssue()
        }
    }

    createJiraProject() {
        console.log('createJiraProject called..');
        this.totalTask.jiraProjectCreated = true
        /*const project_body = {
            "key": "SOF",
            "name": "Software Sample",
            "projectTypeKey": "software",
            "projectTemplateKey": "com.pyxis.greenhopper.jira:gh-scrum-template",
            "description": "Example Project description",
            "lead": "mehebubhossain",
            "assigneeType": "PROJECT_LEAD",
            "avatarId": 10200
        }*/
        if (this.project_record) {
            const name = this.project_record.fields.Name.value
            const inital = name.split(" ").map((n) => n[0]).join('')
            const key = inital + this.randomString(4)
            this.project_body.name = name
            this.project_body.key = key.toUpperCase()
            this.key = this.project_body.key
            console.log('key==> ', this.key);
            this.resolveDependency()
        }

        createJiraProjectLWC({ cloudId: this.cloudId, jsonBody: JSON.stringify(this.project_body) }).then(result => {
            console.log('create project result', JSON.stringify(result))
            //{"errorMessages":[],"errors":{"projectKey":"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."},"StatusCode":400}
            if (result.StatusCode === 201) {
                const recordInput = { fields: { Id: this.recordId, ChikPeaSSB__Jira_Id__c: result.id.toString(), ChikPeaSSB__Jira_Key__c: result.key } }
                updateRecord(recordInput).then(() => {
                    console.log('save project id success')
                    this.createJiraIssue()
                }).catch(error => {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Error updating project',
                            message: error.body.message,
                            variant: 'error',
                            mode: 'sticky'
                        })
                    )
                })
            } else {
                const fieldErrorsKeys = Object.keys(result.errors)

                const errorMsg = fieldErrorsKeys.map(e => {
                    const fieldLabel = e
                    const errorMsg1 = result.errors[e]
                    return fieldLabel + '(Field): ' + errorMsg1
                }).join(', ')

                const evt = new ShowToastEvent({
                    title: "Error",
                    message: errorMsg,
                    variant: "error",
                    mode: 'sticky'
                });
                this.dispatchEvent(evt)
                this.dispatchEvent(new CloseActionScreenEvent())
            }
        }).catch(error => {
            this.error = error;
            console.error('createJiraProjectLWC error ',error)
        })
    }

    createJiraIssue() {
        this.totalTask.jiraIssueSynced = true
        if (this.totalTask.jiraProjectCreated) {
            this.issue.fields.project.key = this.key
        } else {
            this.issue.fields.project.key = this.project_body.key
        }
        //reverse to dependent issues first
        const reversed = this.phase_dep_array.reverse()
        this.issue_body.issueUpdates = reversed.map(element => {
            const issue1 = { ...this.issue }
            issue1.fields = { ...issue1.fields }
            issue1.update = { ...issue1.update }
            issue1.fields.summary = element.fields.Name.value
            issue1.fields.duedate = element.fields.ChikPeaSSB__Est_End_Date__c.value//'2022-09-29'
            //Custom Field: Start date
            issue1.fields.customfield_10015 = element.fields.ChikPeaSSB__Est_Start_date__c.value

            issue1.fields.description.content[0].content[0].text = element.fields.ChikPeaSSB__Descriptions__c.value
            //issue link
            if (this.phase_dependency[element.fields.Name.value]) {
                issue1.update.issuelinks = []
                //issue1.fields.key = element.key
                this.phase_dependency[element.fields.Name.value].forEach(element => {
                    issue1.update.issuelinks.push({
                        add: {
                            type: {
                                name: "Blocks",
                                inward: "is blocked by",
                                outward: "blocks"
                            },
                            outwardIssue: {
                                key: element.key
                            }
                        }
                    })
                })
            }
            //this.issue_map[element.key] = issue1
            return issue1;
        })
        console.log('createJiraIssue dependent', JSON.stringify(this.issue_body.issueUpdates))

        createJiraTicketLWC({ 
            cloudId: this.cloudId, 
            jsonBody: JSON.stringify(this.issue_body) 
        }).then(result => {
            console.log('create issue result dependent', JSON.stringify(result))
            if (result.StatusCode === 201) {
                console.log('createJiraIssue blocks', JSON.stringify(this.issue_body.issueUpdates))
                const evt = new ShowToastEvent({
                    title: "Success",
                    message: "Project created successfully",
                    variant: "success",
                });
                this.dispatchEvent(evt)
                //this.exp1()
            } else {
                const fieldErrorsKeys = Object.keys(result.errors)

                const errorMsg = fieldErrorsKeys.map(e => {
                    const fieldLabel = e
                    const errorMsg1 = result.errors[e]
                    return fieldLabel + '(Field): ' + errorMsg1
                }).join(', ')

                const evt = new ShowToastEvent({
                    title: "Error",
                    message: errorMsg,
                    variant: "error",
                    mode: 'sticky'
                });
                this.dispatchEvent(evt)
            }
            this.dispatchEvent(new CloseActionScreenEvent())

        }).catch(error => {
            this.error = error;
            console.error('createJiraIssue error in => ',error);
            this.dispatchEvent(new CloseActionScreenEvent())
        });



    }

    getJiraTicketLWCJS() {
        console.log('getJiraCloudIdJS!!!');
        getJiraTicketLWC({ 
            cloudId: '$cloudId', 
            jsonBody: '$searchJQL' 
        }).then(data => {
            console.log('getJiraTicketLWC Success=>', JSON.stringify(data));
        }).catch(error => {
            console.error('getJiraTicketLWC error==>', error);
            console.error('JiraIssueView: getJiraTicketLWC', JSON.stringify(error))
        });
    }

    // @wire(jiraGenericCallLWC, { url: '$url', jsonBody: '$jsonBody', method: '$method', callId: '$callId' })
    // handleJiraGenericCallLWC({ error, data }) {
    //     console.log('jiraGenericCallLWC: ')
    //     if (data) {
    //         console.log('jiraGenericCallLWC: ', JSON.stringify(data))
    //     } else if (error) {
    //         console.error('jiraGenericCallLWC: ', JSON.stringify(error))
    //     }
    // }
    jiraGenericCallLWCJS() {
        console.log('getJiraCloudIdJS!!!');
        console.log('url ','$url',' body ','$jsonBody', ' method','$method','callId','$callId');
        jiraGenericCallLWC({ 
            url: '$url', 
            jsonBody: '$jsonBody', 
            method: '$method', 
            callId: '$callId' 
        }).then(data => {
            console.log('jiraGenericCallLWCJS Success=>', JSON.stringify(data));
        }).catch(error => {
            console.error('error==>', error);
            console.error('jiraGenericCallLWC: ', JSON.stringify(error))
        });

        // randomString(length) {
        //     const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        //     var result = '';
        //     for (var i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];
        //     return result;
        // }
    }

    randomString(length) {
        const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        var result = '';
        for (var i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];
        return result;
    }
}